#! /system/bin/sh
# hack to sort photos by name in programs that stupidly use dates.
# (sets the modification timestamps of all files in directory so that they sort
# numerically and alphabetically)

# Android /system/bin/sh on recent phones is derived from MirBSD ksh, so this
# uses ksh's "typeset" command for formatting date codes.

# This version of the script uses Coreutils' GNU Sort, which I have compiled
# for my phone. You can replace the `gnusort` line with the line above it
# reading `for file in *; do` to avoid this requirement, although the sorting
# won't be quite as intelligent/sophisticated.

# Additionally, `touch` on my 32-bit android phone refuses to work on 2038 dates
# _at all_, though using busybox touch or Coreutils' `touch` lets it work up to
# the point of rollover on 32-bit Unix systems.

# ALSO, A WARNING: THIS SCRIPT PARSES `ls`! BE CAREFUL.

#set -o xtrace
# date code of first file.
# 32-bit datecode limit
export ITERYEAR=2037
export ITERMONTH=12
export ITERDAY=29

export ITERHOUR=23
export ITERMIN=59
export ITERSEC=59

# this usage of 'typeset' is what makes this script ksh-specific.
typeset -Z 2 PADSEC
typeset -Z 2 PADMIN
typeset -Z 2 PADHR

typeset -Z 4 PADYEAR
typeset -Z 2 PADMONTH
typeset -Z 2 PADDAY

PADSEC=$ITERSEC
#for file in *; do
#for file in "$(ls | gnusort -V)"; do
#for file in "$(ls | gnusort -V)"; do
ls | gnusort -V |while read file; do
#    echo "$file"
#    echo "break"
    PADHR=$ITERHOUR
    PADMIN=$ITERMIN
    PADSEC=$ITERSEC

    PADYEAR=$ITERYEAR
    PADMONTH=$ITERMONTH
    PADDAY=$ITERDAY

#    PADNUM=$PADHR$PADMIN.$PADSEC
# GNU Coreutils `touch`:
#    PADNUM=$PADYEAR$PADMONTH$PADDAY$PADHR$PADMIN.$PADSEC
# Android toolbox `touch`:
    PADNUM=$PADYEAR$PADMONTH$PADDAY.$PADHR$PADMIN$PADSEC
    touch -t $PADNUM "$file"

    ITERSEC=`expr $ITERSEC - 1`


    if [ "$ITERSEC" -lt "0" ]; then
        ITERMIN=`expr $ITERMIN - 1`
        ITERSEC=59
    fi
    if [ "$ITERMIN" -lt "0" ]; then
        ITERHOUR=`expr $ITERHOUR - 1`
        ITERMIN=59
    fi

    if [ "$ITERHOUR" -lt "0" ]; then #00:00 is midnight
        ITERDAY=`expr $ITERDAY - 1`
        ITERHOUR=23
    fi

    if [ "$ITERDAY" -le "0" ]; then
        ITERMONTH=`expr $ITERMONTH - 1`
        ITERDAY=29 #might be able to do 30 but I'm too lazy to think it through
    fi

    if [ "$ITERMONTH" -le "0" ]; then
        ITERYEAR=`expr $ITERYEAR - 1`
        ITERMONTH=12 #might be able to do 13, too lazy to think it through.
    fi
#done
done


#export ITERYEAR=2038
#export ITERMONTH=1
#export ITERDAY=19

#export ITERSEC=7
#export ITERMIN=14
#export ITERHOUR=3
